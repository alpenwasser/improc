#!/usr/bin/perl
use warnings;
use strict;

use 5.10.0;
use GD;
use GD::Text::Align;
use File::Basename;		# dirname(),fileparse(),basename()
use Getopt::Long;


# TODO:
# add capability to specify logo size
# add capability to specify logo placement


#-------------------------------------------------------------------------------
# GLOBAL VARIABLES
#-------------------------------------------------------------------------------

my $DESIRED_W;
my $DESIRED_H;
my @SOURCE_FILES;
my @TRIM; # Trim factors: (top, right, bottom, left)
my @SUFFIX_LIST = (".jpeg",".png",".jpg");
my @IMG_FILES;

# Based on a square logo 1/10 the width of a 1.5/1 image:
my $LOGO_AREA_RATIO = 0.0225;
my $LOGO;

my $OVERWRITE = 0;

my $OUTPUT_FORMAT; # NOTE: Transparent areas from png files will be converted
                   #       to black when converting to jpeg.


#-------------------------------------------------------------------------------
# FUNCTIONS
#-------------------------------------------------------------------------------

sub get_input_args
{
	my $arg_parser = Getopt::Long::Parser->new();
	$arg_parser->getoptions(
		"logo|l=s"           => \$LOGO,
		"width|w=i"          => \$DESIRED_W,
		"height|h=i"         => \$DESIRED_H,
		"files|f=s{,}"       => \@SOURCE_FILES,
		"trim|t=s{,}"        => \@TRIM,
		"overwrite|o!"       => \$OVERWRITE,
		"output_format|of=s" => \$OUTPUT_FORMAT
	) or die ("Insufficient arguments");

	die("No image files specified.") unless (@SOURCE_FILES);
}


sub validate_trim_factors
{
	my $trim_ref = shift;

        # Validate trim array...
	if (scalar(@{ $trim_ref }) == 0)
	{
		@{ $trim_ref }=(0,0,0,0);
	}

	if (scalar(@{ $trim_ref }) < 4)
	{
		say "NOTE: Too few trim arguments specified. "
		  . "Assuming zero for unspecified elements. ";

		# Pad array with zeroes.
		push @{ $trim_ref }, 0 until (scalar(@{ $trim_ref }) == 4);
	}
	elsif (scalar(@{ $trim_ref } > 4))
	{
		say "NOTE: Too many trim arguments specified. "
		  . "Removing excess elements. ";

		# Remove excess elements.
		pop @{ $trim_ref } until (scalar(@{ $trim_ref }) == 4);
	}

	foreach (@{ $trim_ref })
	{
                # Trim values are relative  to image size, so values
                # between 0 and 1 make sense.
		die("Trim values must be between 0 and 1," 
			. " invalid range specified.") 
			unless ($_ >=0 && $_ <= 1);
	}

        # Make  sure we  don't try  to trim  away more  than
        # there actually is.
	if (${ $trim_ref }[0] + ${ $trim_ref }[2] >= 1)
	{
		die("Trim values in X-Direction exceed image width.");
	}
	elsif (${ $trim_ref }[1] + ${ $trim_ref }[3] >= 1)
	{
		die("Trim values in Y-Direction exceed image height.");
	}
}


sub provide_output_dir
{
        # Create output directory if it does not yet exist.
	mkdir("output",0755) unless (-d "output");
}


sub grab_source_files
{
        # Find directories  in input,  check them  for image
        # files. Does not work recursively.


	my $img_files_ref    = shift;
	my $suffix_list_ref  = shift;
	my $source_files_ref = shift;


	for my $img_file (@{ $source_files_ref })
	{
		if (-d $img_file)
		{
			for my $current_extension (@{ $suffix_list_ref })
			{
				while (<$img_file/*$current_extension>)
				{
					push @{ $img_files_ref }, $_;
				}
			}
		}
		else
		{
			push @{ $img_files_ref }, $img_file;
		}
	}

	return scalar(@{ $img_files_ref });
}


sub set_img_params
{
        # NOTE: $image is already  a reference due to Perl's
        # OOP system.
	my $image = shift;

	$image->interlaced('true');
	$image->alphaBlending(0);
	$image->saveAlpha(1);
}


sub create_empty_img
{
	my $width  = shift;
	my $height = shift;

	my $image = GD::Image->new($width, $height);

	set_img_params($image);

	return $image;
}


sub load_img_from_file
{
	my $file = shift;

	my $image = GD::Image->new($file) or die("Could not load: " . $file);
	set_img_params($image);

        # NOTE: $image is a reference,  no need to pass back
        # a reference to $image here.
	return $image;
}


sub set_logo_dimensions
{
	# $gd_logo: reference to a GD::Image object.
	my $gd_logo         = shift;
	my $target_w        = shift;
	my $target_h        = shift;
	my $logo_area_ratio = shift;
	
	# Figure out how large the output logo needs to be.
	my ($logo_src_w, $logo_src_h) = $gd_logo->getBounds();
	my $logo_ratio = $logo_src_w / $logo_src_h;
	my $logo_w = sqrt($target_w 
		   * $target_h 
		   * $logo_area_ratio 
		   * $logo_ratio);
	my $logo_h = $logo_w / $logo_ratio;

	return ($logo_src_w, $logo_src_h, $logo_w, $logo_h);
}


sub add_logo
{
	my $logo            = shift;
	my $target_w        = shift;
	my $target_h        = shift;
	my $logo_area_ratio = shift;
	my $output_file_ref = shift;


	# Load original logo file.
	my $gd_logo = load_img_from_file($logo);
	my $transparent = $gd_logo->colorAllocateAlpha(0,0,0,127);
	$gd_logo->transparent($transparent);

	my ($logo_src_w, $logo_src_h, $logo_w, $logo_h) = set_logo_dimensions(
		$gd_logo, 
		$target_w, 
		$target_h, 
		$logo_area_ratio
	);

	# Create empty image for output logo.
	my $output_logo = create_empty_img($logo_w, $logo_w);
	$output_logo->transparent($transparent);

	# Copy logo into logo output file...
	$output_logo->copyResampled(
		$gd_logo,
		0,
		0,
		0,
		0,
		$logo_w,
		$logo_h,
		$logo_src_w,
		$logo_src_h
	);

	# ...and merge the result back into main image.
	${ $output_file_ref }->copyMerge(
		$output_logo,
		$target_w - $logo_w,
		$target_h - $logo_h,
		0,
		0,
		$logo_w,
		$logo_h,
		40
	);
}


sub handle_overwrite
{
	my $filename  = shift;
	my $extension = shift;
	my $overwrite = shift;

	return $filename if ($overwrite);

        # Prevent  overwriting  of  existing  files,  rename
        # current file if necessary. Numbered sequentially.
	if (-f "output/" . $filename . $extension)
	{
		my $duplicate_counter = 1;
		my $new_filename = $filename . "_" . $duplicate_counter;
		while (-f "output/" . $new_filename . $extension)
		{
			++$duplicate_counter;
			$new_filename = $filename . "_" . $duplicate_counter;
		}
		$filename = $new_filename;
	}
	return $filename;
}


sub write_output_file
{
	my $filename        = shift;
	my $extension       = shift;
	my $output_file_ref = shift;

	# Write to file.
	if ($extension eq ".jpeg" or $extension eq ".jpg")
	{
		open(GD, ">output/" . $filename . $extension) 
			or die("Could not open file: output/" 
				. $filename . $extension);
		binmode GD;
		print GD ${ $output_file_ref }->jpeg(80);
		close GD;
	}
	elsif ($extension eq ".png")
	{
		open(GD, ">output/" . $filename . $extension)
			or die("Could not open file: output/" 
				. $filename . $extension);
		binmode GD;
		print GD ${ $output_file_ref }->png;
		close GD;
	}
	elsif ($extension eq ".gif")
	{
		# TODO: Get transparency to work in gifs.
		open(GD, ">output/" . $filename . $extension)
			or die("Could not open file: output/" 
				. $filename . $extension);
		binmode GD;
		print GD ${ $output_file_ref }->gif;
		close GD;
	}
	else
	{
		die("No valid image format specified. Supported formats:"
			. " jpeg, png, gif.");
	}
}


sub print_status
{
	my $counter_ref = shift;
	my $image_count = shift;
	my $img_file    = shift;

	++${ $counter_ref };

	my $length = length $image_count;
	my $status = sprintf("[ % ${length}u / %u ]    Processing %s",
		${ $counter_ref },
		$image_count,
		$img_file
	);
	say $status;
}


sub get_src_dimensions
{
	my $gd_source = shift;
	my $trim_ref  = shift;

	my ($source_w, $source_h) = $gd_source->getBounds();

	my $trimmed_src_w 
		= $source_w * (1 - ${ $trim_ref} [1] - ${ $trim_ref }[3]);
	my $trimmed_src_h 
		= $source_h * (1 - ${ $trim_ref} [0] - ${ $trim_ref }[2]);

	my $src_x = ${ $trim_ref }[3] * $source_w;
	my $src_y = ${ $trim_ref }[0] * $source_h;

	my $ratio = $trimmed_src_w / $trimmed_src_h;

	return ($src_x, $src_y, $trimmed_src_w, $trimmed_src_h, $ratio);
}


sub get_target_dimensions
{
	my $ratio         = shift;
	my $desired_w     = shift;
	my $desired_h     = shift;
	my $trimmed_src_w = shift;
	my $trimmed_src_h = shift;

	my $target_w;
	my $target_h;
	$target_w = $desired_w unless (!$desired_w);
	$target_h = $desired_h unless (!$desired_h);

	# Determine  target  dimensions  if  not  explicitly
	# defined by command line:
	if (!$target_w && !$target_h)
	{
                # If neither target  width nor target height
                # have  been specified,  keep dimensions  of
                # original image (or the trimmed area).
		$target_w = $trimmed_src_w;
		$target_h = $trimmed_src_h;
	}
	elsif (!$target_w)
	{
		# If target height but	not target width has
		# been	specified,  determine  target  width
		# based  on  height   and  aspect  ratio  of
		# source...
		$target_w = $target_h * $ratio;
	}
	elsif (!$target_h)
	{
		# ... or vice versa.
		$target_h = $target_w / $ratio;
	}

	return ($target_w, $target_h);
}


sub process_images
{
	my $image_count     = shift;
	my $img_files_ref   = shift;
	my $desired_w       = shift;
	my $desired_h       = shift;
	my $suffix_list_ref = shift;
	my $trim_ref        = shift;
	my $logo            = shift;
	my $logo_area_ratio = shift;
	my $overwrite       = shift;
	my $output_format   = shift;

	my $counter         = 0;

	for my $img_file (@{ $img_files_ref })
	{
		print_status(\$counter, $image_count, $img_file);

		GD::Image->trueColor(1);
		my $gd_source = load_img_from_file($img_file);

		my ($src_x, $src_y, $trimmed_src_w, $trimmed_src_h, $ratio)
			= get_src_dimensions($gd_source, $trim_ref);

		my ($target_w, $target_h) = get_target_dimensions(
			$ratio, 
			$desired_w, 
			$desired_h,
			$trimmed_src_w,
			$trimmed_src_h
		);

		my $output_file = create_empty_img($target_w, $target_h);

		$output_file->copyResampled(
			$gd_source,       # $srcImage
			0,                # $dstX
			0,                # $dstY
			$src_x,           # $srcX
			$src_y,           # $srcY
			$target_w,        # $destW
			$target_h,        # $destH
			$trimmed_src_w,   # $srcW
			$trimmed_src_h,   # $srcH
		);


	        #  NOTE: Since each image  can have different output
                #  size  and the  logo dimensions  depend on  output
                #  image size, we  need to create a  unique logo for
                #  each output image.
		add_logo(
			$logo,
			$target_w,
			$target_h,
			$logo_area_ratio,
			\$output_file
		) if ($logo);


		my ($filename,$path,$extension) 
			= fileparse($img_file,@{ $suffix_list_ref });
		$extension = "." . $output_format if ($output_format);
		$filename = handle_overwrite($filename, $extension, $overwrite);
		write_output_file($filename, $extension, \$output_file);
	}
}


#-------------------------------------------------------------------------------
# MAIN SEQUENCE
#-------------------------------------------------------------------------------

get_input_args();
validate_trim_factors(\@TRIM);
provide_output_dir();
process_images(
	grab_source_files(     # returns img_count
		\@IMG_FILES,
		\@SUFFIX_LIST,
		\@SOURCE_FILES
	),
	\@IMG_FILES,
	$DESIRED_W, 
	$DESIRED_H,
	\@SUFFIX_LIST,
	\@TRIM,
	$LOGO,
	$LOGO_AREA_RATIO,
	$OVERWRITE,
	$OUTPUT_FORMAT
);
